schema {
  query: Query
}

type Query {
  person("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PersonFilterInput order: [PersonSortInput!]): PersonConnection
}

input PersonFilterInput {
  and: [PersonFilterInput!]
  or: [PersonFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  ordinal: IntOperationFilterInput
}

input PersonSortInput {
  id: SortEnumType
  name: SortEnumType
  ordinal: SortEnumType
}

"A connection to a list of items."
type PersonConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PersonEdge!]
  "A flattened list of the nodes."
  nodes: [Person!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Person {
  id: UUID!
  name: String!
  ordinal: Int!
}

"An edge in a connection."
type PersonEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Person!
}

scalar UUID